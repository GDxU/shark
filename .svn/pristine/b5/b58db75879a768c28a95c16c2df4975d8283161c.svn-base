<template>
    <div id="container">
        <h1 class="h1-title">活动配置</h1>
        <div class="cms-content">
            <el-tabs type="border-card">
                <el-tab-pane label="活动模板">
                    <!--功能按钮-->
                    <el-button type="success" @click="add_activity" plain>新建活动模板1</el-button>
                    <el-button type="success" @click.native="add_activity_2" plain>新建活动模板2</el-button>
                    <el-button type="warning" @click.native="add_task_2" plain>配置 Bannar + 任务链</el-button>
                    <el-button type="success" @click.native="add_activity_3" plain>新建活动模板3</el-button>
                    <el-button type="success" @click.native="add_big_activity" plain>新建大活动弹窗</el-button>
                    <br />
                    <br />
                    <h1 class="h1-title">模板Table</h1>
                    <el-button type="primary" @click="query_activity" plain>查 询</el-button>
                    <table-option :parent-message="temp1_Msg" v-on:outputrow="temp1_recieveRow" v-loading="temp1loading"
                                  element-loading-text="拼命加载中"></table-option>
                    <br />
                    <br />
                    <h1 class="h1-title">Bannar + 任务链 Table</h1>
                    <el-button type="primary" @click.native="query_bannerAct" plain>查 询</el-button>
                    <table-option :parent-message="bannerAct_Msg" v-on:outputrow="banner_recieveRow"
                                  v-loading="temp2loading" element-loading-text="拼命加载中"></table-option>
                </el-tab-pane>
                <el-tab-pane label="公告界面">
                    <el-button type="success" @click.native="add_notice_1" plain>新建公告模板1</el-button>
                    <el-button type="success" @click.native="add_notice_2" plain>新建公告模板2</el-button>
                    <el-button type="success" @click.native="add_notice_3" plain>新建公告模板3</el-button>
                    <el-button type="primary" @click.native="query_notice_btn" plain>查 询</el-button>
                    <br />
                    <br />
                    <table-option :parent-message="notice_Msg" v-on:outputrow="notice_recieveRow"
                                  v-loading="noticeloading" element-loading-text="拼命加载中"></table-option>
                </el-tab-pane>
            </el-tabs>
        </div>
        <!-- 活动模板1 -->
        <el-dialog title="新建活动模板1 -- 全宣传图" width="98%" :visible.sync="temp_1_dialog">
            <ele-form :config="temp_1_dialog_config" v-on:receive="temp_1_dialog_submit"
                      :eventname="temp_1_dialog_event" :defaultdata="temp1DialogHtml"></ele-form>
            <h1 class="h1-title">规则内容：</h1>
            <editor v-on:editorcontent="getEditorContent" :getcontext="getcontext"></editor>
            <div slot="footer" class="dialog-footer">
                <el-button @click="temp_1_dialog = false">取 消</el-button>
                <el-button type="primary" @click="temp_1_dialog_name">确 定</el-button>
            </div>
        </el-dialog>
        <!-- 活动模板2 -->
        <el-dialog title="新建活动模板2 -- Bannar+任务链" width="98%" :visible.sync="temp_2_dialog">
            <ele-form :config="temp_2_dialog_config" v-on:receive="temp_2_dialog_submit"
                      :eventname="temp_2_dialog_event" :defaultdata="temp2DialogHtml"></ele-form>
            <h1 class="h1-title">规则内容：</h1>
            <editor2 v-on:editorcontent="getTemp2EditorContent" :gettemp2content="gettemp2content"></editor2>
            <div slot="footer" class="dialog-footer">
                <el-button @click="temp_2_dialog = false">取 消</el-button>
                <el-button type="primary" @click="temp_2_dialog_name">确 定</el-button>
            </div>
        </el-dialog>
        <!-- 活动模板3 -->
        <el-dialog title="新建活动模板3 -- Bannar+功能区" width="98%" :visible.sync="temp_3_dialog">
            <ele-form :config="temp_3_dialog_config" v-on:receive="temp_3_dialog_submit"
                      :eventname="temp_3_dialog_event" :defaultdata="temp3DialogHtml"></ele-form>
            <h1 class="h1-title">规则内容：</h1>
            <editor3 v-on:editorcontent="getTemp3EditorContent" :gettemp3content="gettemp3content"></editor3>
            <div slot="footer" class="dialog-footer">
                <el-button @click="temp_3_dialog = false">取 消</el-button>
                <el-button type="primary" @click="temp_3_dialog_name">确 定</el-button>
            </div>
        </el-dialog>
        <!-- 大活动弹窗 -->
        <el-dialog title="新建大活动弹窗" width="98%" :visible.sync="big_activity_dialog">
            <ele-form :config="big_activity_dialog_config" v-on:receive="big_activity_dialog_submit"
                      :eventname="big_activity_dialog_event" :defaultdata="bigActivityDialogHtml"></ele-form>
            <h1 class="h1-title">规则内容：</h1>
            <editor7 v-on:editorcontent="bigActEditotContent" :bigActContent="bigActContent"></editor7>
            <div slot="footer" class="dialog-footer">
                <el-button @click="big_activity_dialog = false">取 消</el-button>
                <el-button type="primary" @click="big_activity_dialog_name">确 定</el-button>
            </div>
        </el-dialog>
        <!-- 活动模板4 - 公告1 -->
        <el-dialog title="新建公告模板1" width="98%" :visible.sync="temp_4_notice_1_dialog">
            <ele-form :config="temp_4_notice_dialog_config" v-on:receive="temp_4_notice_dialog_submit"
                      :eventname="temp_4_notice_dialog_event" :defaultdata="temp4NoticeDialogHtml"></ele-form>
            <h1 class="h1-title">公告内容：</h1>
            <editor4 v-on:editorcontent="notice1EditorContent" :notice1content="notice1content"></editor4>
            <div slot="footer" class="dialog-footer">
                <el-button @click="temp_4_notice_1_dialog = false">取 消</el-button>
                <el-button type="primary" @click="temp_4_notice_dialog_name">确 定</el-button>
            </div>
        </el-dialog>
        <!-- 活动模板4 - 公告2 -->
        <el-dialog title="新建公告模板1" width="98%" :visible.sync="temp_4_notice_2_dialog">
            <ele-form :config="temp_4_notice2_dialog_config" v-on:receive="temp_4_notice2_dialog_submit"
                      :eventname="temp_4_notice2_dialog_event" :defaultdata="temp4NoticeDialogHtml1"></ele-form>
            <h1 class="h1-title">公告内容：</h1>
            <editor5 v-on:editorcontent="notice2EditorContent" :notice2content="notice2content"></editor5>
            <div slot="footer" class="dialog-footer">
                <el-button @click="temp_4_notice_2_dialog = false">取 消</el-button>
                <el-button type="primary" @click="temp_4_notice2_dialog_name">确 定</el-button>
            </div>
        </el-dialog>
        <!-- 活动模板4 - 公告3 -->
        <el-dialog title="新建公告模板1" width="98%" :visible.sync="temp_4_notice_3_dialog">
            <ele-form :config="temp_4_notice3_dialog_config" v-on:receive="temp_4_notice3_dialog_submit"
                      :eventname="temp_4_notice3_dialog_event" :defaultdata="temp4NoticeDialogHtml2"></ele-form>
            <h1 class="h1-title">公告内容：</h1>
            <editor6 v-on:editorcontent="notice3EditorContent" :notice3content="notice3content"></editor6>
            <div slot="footer" class="dialog-footer">
                <el-button @click="temp_4_notice_3_dialog = false">取 消</el-button>
                <el-button type="primary" @click="temp_4_notice3_dialog_name">确 定</el-button>
            </div>
        </el-dialog>
        <!-- 活动模板2 配置 Banner + 任务链 -->
        <el-dialog title="配置 Banner + 任务链" width="90%" :visible.sync="task_2_dialog">
            <ele-form :config="task_2_dialog_config" v-on:receive="task_2_dialog_submit"
                      :eventname="task_2_dialog_event"></ele-form>
            <br />
            <el-row>
                <attr-and-item v-on:attrAndItem="refreshAttrAndItem"></attr-and-item>
            </el-row>
            <div slot="footer" class="dialog-footer">
                <el-button @click="task_2_dialog = false">取 消</el-button>
                <el-button type="primary" @click="task_2_dialog_name">确 定</el-button>
            </div>
        </el-dialog>
        <!-- 活动模板编辑 -->
        <el-dialog title="活动模板编辑" width="98%" :visible.sync="editActivityTempDialog">
            <ele-form :config="editActivityTempDialogConfig" v-on:receive="editActivityTempDialogsumbit"
                      :eventname="editActivityTempDialogEvent" :defaultdata="editActivityTempDialogHtml"></ele-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="editActivityTempDialog = false">取 消</el-button>
                <el-button type="primary" @click="editActivityTempDialogName">确 定</el-button>
            </div>
        </el-dialog>
        <!-- Banner + 任务链 编辑 -->
        <el-dialog title="Banner + 任务链 编辑" width="90%" :visible.sync="editBannerTaskDialog">
            <ele-form :config="BannerTaskDialogConfig" v-on:receive="BannerTaskDialogSumbit"
                      :eventname="BannerTaskDialogEvent" :defaultdata="editBannerDialogHtml"></ele-form>
            <br />
            <el-row>
                <attr-and-item v-on:attrAndItem="refreshAttrAndItem"></attr-and-item>
            </el-row>
            <div slot="footer" class="dialog-footer">
                <el-button @click="editBannerTaskDialog = false">取 消</el-button>
                <el-button type="primary" @click="BannerTaskDialogName">确 定</el-button>
            </div>
        </el-dialog>
        <!-- 公告编辑 -->
        <el-dialog title="公告编辑" width="98%" :visible.sync="editNoticeDialog">
            <ele-form :config="editNoticeDialogConfig" v-on:receive="editNoticeDialogSumbit"
                      :eventname="editNoticeDialogEvent" :defaultdata="editNoticeDialogHtml"></ele-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="editNoticeDialog = false">取 消</el-button>
                <el-button type="primary" @click="editNoticeDialogName">确 定</el-button>
            </div>
        </el-dialog>
    </div>
</template>

<script>
    import {
        tempDialogForm,
        tempDialogForm2,
        tempDialogForm3,
        tempDialogForm4Notice1,
        tempDialogForm4Notice2,
        tempDialogForm4Notice3,
        task2DialogForm,
        bigActivityDialogForm,
        editActivityTempDialogForm,
        editNoticeDialogForm
    } from '@/form/config/activity_config'
    import {
        tempTable,
        noticeTable,
        bannerActTable
    } from '@/table/config/activity_config'
    import attrAndItem from '@/components/libs/attrAndItem'
    import editor from '@/components/libs/editor'
    import editor2 from '@/components/libs/temp2Editor'
    import editor3 from '@/components/libs/temp3Editor'
    import editor4 from '@/components/libs/notice1Editor'
    import editor5 from '@/components/libs/notice2Editor'
    import editor6 from '@/components/libs/notice3Editor'
    import editor7 from '@/components/libs/bigActEditor'

    export default {
        name: 'activity_config',
        /* 组件内自行使用的数据可以在data内渲染 */
        data() {
            return {
                /* 活动模板编辑 */
                editActivityTempDialog: false,
                editActivityTempDialogEvent: false,
                editActivityTempDialogConfig: editActivityTempDialogForm(),
                editActivityTempDialogHtml: {},
                editAcHtml: '',
                /* 活动模板1 */
                getcontext: false,
                editorHtml: '',
                temp_1_dialog: false,
                temp_1_dialog_config: tempDialogForm(),
                temp_1_dialog_event: false,
                temp1_Msg: tempTable(),
                temp1loading: false,
                temp1DialogHtml: {
                    Classify: 1,
                    DeviceType: 1,
                    AccountType: 1
                },
                /* 编辑Banner + 任务链 */
                editBannerTaskDialog: false,
                BannerTaskDialogConfig: task2DialogForm(),
                BannerTaskDialogEvent: false,
                editBannerDialogHtml: {},
                /* 活动模板2 */
                gettemp2content: false,
                temp2Html: '',
                temp2loading: false,
                bannerAct_Msg: bannerActTable(),
                temp2DialogHtml: {
                    Classify: 1,
                    DeviceType: 1,
                    AccountType: 1
                },
                temp_2_dialog: false,
                temp_2_dialog_config: tempDialogForm2(),
                temp_2_dialog_event: false,
                task_2_dialog: false,
                task_2_dialog_config: task2DialogForm(),
                task_2_dialog_event: false,
                editAttrAndItem: [{}, {}],
                /* 活动模板3 */
                gettemp3content: false,
                temp3Html: '',
                temp_3_dialog: false,
                temp_3_dialog_config: tempDialogForm3(),
                temp_3_dialog_event: false,
                temp3DialogHtml: {
                    Classify: 1,
                    DeviceType: 1,
                    AccountType: 1
                },
                /* 大活动弹窗 */
                big_activity_dialog: false,
                big_activity_dialog_config: bigActivityDialogForm(),
                big_activity_dialog_event: false,
                bigActivityDialogHtml: {},
                bigActContent: false,
                bigActHtml: '',
                /* 活动模板4 */
                mubanName: '',
                notice_Msg: noticeTable(),
                noticeloading: false,
                // 公告1
                temp_4_notice_1_dialog: false,
                temp_4_notice_dialog_config: tempDialogForm4Notice1(),
                temp_4_notice_dialog_event: false,
                temp4NoticeDialogHtml: {
                    Classify: 2,
                    DeviceType: 1,
                    AccountType: 1
                },
                notice1content: false,
                notice1Html: '',
                // 公告2
                temp_4_notice_2_dialog: false,
                temp_4_notice2_dialog_config: tempDialogForm4Notice2(),
                temp_4_notice2_dialog_event: false,
                temp4NoticeDialogHtml1: {
                    Classify: 2,
                    DeviceType: 1,
                    AccountType: 1
                },
                notice2content: false,
                notice2Html: '',
                // 公告3
                temp_4_notice_3_dialog: false,
                temp_4_notice3_dialog_config: tempDialogForm4Notice3(),
                temp_4_notice3_dialog_event: false,
                temp4NoticeDialogHtml2: {
                    Classify: 2,
                    DeviceType: 1,
                    AccountType: 1
                },
                notice3content: false,
                notice3Html: '',
                /* 编辑公告 */
                editNoticeDialog: false,
                editNoticeDialogConfig: editNoticeDialogForm(),
                editNoticeDialogEvent: false,
                editNoticeDialogHtml: {},
            }
        },
        /* 需要元素渲染完调用的方法放在mounted内 */
        mounted() {
        },
        /* 需要事件调用的方法放在methods内 */
        methods: {
            query_activity() {
                this.temp1loading = true;
                this.$res.postData(this, '/Activityconfig/query_activity/').then((response) => {
                    this.temp1_Msg.data = [];
                    this.temp1_Msg.data = response;
                    this.temp1loading = false;
                    this.$message.success('查询成功');
                });
            },
            query_bannerAct() {
                this.temp2loading = true;
                this.$res.postData(this, '/Activityconfig/query_banner_chain/').then((response) => {
                    this.bannerAct_Msg.data = [];
                    this.bannerAct_Msg.data = response;
                    this.temp2loading = false;
                    this.$message.success('查询成功');
                });
            },
            add_activity() {
                this.temp_1_dialog = true;
            },
            temp_1_dialog_submit(arg) {
                this.getcontext = true;
                this.editorHtml = arg;
            },
            getEditorContent(html) {
                this.getcontext = false;
                let param = {
                    ActivityID: this.editorHtml[0].ActivityID,
                    ActivityName: this.editorHtml[0].ActivityName,
                    Classify: this.editorHtml[0].Classify,
                    SortID: this.editorHtml[0].SortID,
                    StartTime: this.editorHtml[0].StartTime,
                    EndTime: this.editorHtml[0].EndTime,
                    BgImage: this.editorHtml[0].BgImage,
                    DeviceType: this.editorHtml[0].DeviceType,
                    AccountType: this.editorHtml[0].AccountType,
                    ChannelID: this.editorHtml[0].ChannelID,
                    Recharge: this.editorHtml[0].Recharge,
                    RegisterDate1: this.editorHtml[0].query_start_time,
                    RegisterDate2: this.editorHtml[0].query_end_time,
                    PlayerID: this.editorHtml[0].PlayerID,
                    ImageUrl: this.editorHtml[0].ImageUrl,
                    LocationUrl: this.editorHtml[0].LocationUrl,
                    WebUrl: this.editorHtml[0].WebUrl,
                    BtnStyle: this.editorHtml[0].BtnStyle,
                    BtnWords: this.editorHtml[0].BtnWords,
                    RuleBtn: this.editorHtml[0].RuleBtn,
                    RuleContent: html,
                    IsTab: this.editorHtml[0].IsTab,
                    TabType: this.editorHtml[0].TabType,
                    TempID: 1
                };
                this.$res.postData(this, '/Activityconfig/add_activity/', param).then((response) => {
                    this.temp_1_dialog_event = false;
                    if (response.code == 0) {
                        this.$res.postData(this, '/Activityconfig/query_activity/').then((response) => {
                            this.temp1_Msg.data = [];
                            this.temp1_Msg.data = response;
                        });
                        this.temp_1_dialog = false;
                        this.$message.success(response.msg);
                    } else {
                        this.$message.error(response.msg);
                    }
                });
            },
            temp_1_dialog_name() {
                this.temp_1_dialog_event = 'submitEvent';
            },
            temp1_recieveRow(arg) {
                switch (arg[2]) {
                    case 'edit':
                        this.editActivityTempDialog = true;
                        this.editActivityTempDialogHtml = arg[1];
                        break;
                    case 'delete':
                        this.$confirm('此操作将会永久删除该活动，是否继续？', '温馨提示', {
                            confirmButtonText: '确定',
                            cancelButtonText: '取消',
                            type: 'warning'
                        }).then(() => {
                            this.$res.postData(this, '/Activityconfig/del_activity_temp/', arg[1]).then((res) => {
                                if (res.code == 0) {
                                    this.$res.postData(this, '/Activityconfig/query_activity/').then((response) => {
                                        this.temp1_Msg.data = [];
                                        this.temp1_Msg.data = response;
                                    });
                                    this.$message.success(res.msg);
                                } else {
                                    this.$message.error(res.msg);
                                }
                            });
                        }).catch(() => {
                            this.$message({
                                type: 'info',
                                message: '已取消删除'
                            });
                        });
                        break;
                }
            },
            editActivityTempDialogName() {
                this.editActivityTempDialogEvent = 'submitEvent';
            },
            editActivityTempDialogsumbit(arg) {
                this.editActivityTempDialogEvent = false;
                this.$res.postData(this, '/Activityconfig/edit_activity_temp/', arg[0]).then((res) => {
                    if (res.code == 0) {
                        this.$res.postData(this, '/Activityconfig/query_activity/').then((response) => {
                            this.temp1_Msg.data = [];
                            this.temp1_Msg.data = response;
                        });
                        this.editActivityTempDialog = false;
                        this.$message.success(res.msg);
                    } else {
                        this.$message.error(res.msg);
                    }
                });
            },
            /* 活动模板2 */
            add_activity_2() {
                this.temp_2_dialog = true;
            },
            temp_2_dialog_submit(arg) {
                this.gettemp2content = true;
                this.temp2Html = arg;
            },
            getTemp2EditorContent(html) {
                this.gettemp2content = false;
                let param = {
                    ActivityID: this.temp2Html[0].ActivityID,
                    ActivityName: this.temp2Html[0].ActivityName,
                    Classify: this.temp2Html[0].Classify,
                    SortID: this.temp2Html[0].SortID,
                    StartTime: this.temp2Html[0].StartTime,
                    EndTime: this.temp2Html[0].EndTime,
                    BgImage: this.temp2Html[0].BgImage,
                    DeviceType: this.temp2Html[0].DeviceType,
                    AccountType: this.temp2Html[0].AccountType,
                    ChannelID: this.temp2Html[0].ChannelID,
                    Recharge: this.temp2Html[0].Recharge,
                    RegisterDate1: this.temp2Html[0].query_start_time,
                    RegisterDate2: this.temp2Html[0].query_end_time,
                    PlayerID: this.temp2Html[0].PlayerID,
                    Bannar: this.temp2Html[0].Bannar,
                    RuleBtn: this.temp2Html[0].RuleBtn,
                    RuleContent: html,
                    IsTab: this.temp2Html[0].IsTab,
                    TabType: this.temp2Html[0].TabType,
                    TempID: 2
                };
                this.$res.postData(this, '/Activityconfig/add_activity/', param).then((response) => {
                    this.temp_2_dialog_event = false;
                    if (response.code == 0) {
                        this.$res.postData(this, '/Activityconfig/query_activity/').then((response) => {
                            this.temp1_Msg.data = [];
                            this.temp1_Msg.data = response;
                        });
                        this.temp_2_dialog = false;
                        this.$message.success(response.msg);
                    } else {
                        this.$message.error(response.msg);
                    }
                });
            },
            temp_2_dialog_name() {
                this.temp_2_dialog_event = 'submitEvent';
            },
            // 配置 Banner + 任务链
            add_task_2() {
                this.task_2_dialog = true;
            },
            task_2_dialog_submit(arg) {
                let param = {
                    ActivityID: arg[0].ActivityID, //活动ID
                    TaskID: arg[0].TaskID, //任务ID
                    SortID: arg[0].SortID, //排序
                    TaskDesc: arg[0].TaskDesc, //任务说明
                    TaskType: arg[0].TaskType, //任务类型
                    TaskNum: arg[0].TaskNum, //任务数量
                    FrontTask: arg[0].FrontTask, //任务编号
                    Jump: arg[0].Jump, //按钮跳转
                    res_and_item: JSON.stringify(this.editAttrAndItem), //物品
                    Recharge: arg[0].Recharge, //充值额度
                    DayLimitCount: arg[0].DayLimitCount, //日次数
                    WeekLimitCount: arg[0].WeekLimitCount, //周次数
                    TotalLimitCount: arg[0].TotalLimitCount, //总次数
                };
                this.$res.postData(this, '/Activityconfig/add_banner_chain/', param).then((response) => {
                    this.task_2_dialog_event = false;
                    if (response.code == 0) {
                        this.$res.postData(this, '/Activityconfig/query_banner_chain/').then((response) => {
                            this.bannerAct_Msg.data = [];
                            this.bannerAct_Msg.data = response;
                        });
                        this.task_2_dialog = false;
                        this.$message.success(response.msg);
                    } else {
                        this.$message.error(response.msg);
                    }
                });
            },
            task_2_dialog_name() {
                this.task_2_dialog_event = 'submitEvent';
            },
            refreshAttrAndItem(arg) {
                this.editAttrAndItem = arg;
            },
            /* 活动模板3 */
            add_activity_3() {
                this.temp_3_dialog = true;
            },
            temp_3_dialog_submit(arg) {
                this.gettemp3content = true;
                this.temp3Html = arg;
            },
            getTemp3EditorContent(html) {
                this.gettemp3content = false;
                let param = {
                    ActivityID: this.temp3Html[0].ActivityID,
                    ActivityName: this.temp3Html[0].ActivityName,
                    Classify: this.temp3Html[0].Classify,
                    SortID: this.temp3Html[0].SortID,
                    StartTime: this.temp3Html[0].StartTime,
                    EndTime: this.temp3Html[0].EndTime,
                    BgImage: this.temp3Html[0].BgImage,
                    DeviceType: this.temp3Html[0].DeviceType,
                    AccountType: this.temp3Html[0].AccountType,
                    ChannelID: this.temp3Html[0].ChannelID,
                    Recharge: this.temp3Html[0].Recharge,
                    RegisterDate1: this.temp3Html[0].query_start_time,
                    RegisterDate2: this.temp3Html[0].query_end_time,
                    PlayerID: this.temp3Html[0].PlayerID,
                    Bannar: this.temp3Html[0].Bannar,
                    RuleBtn: this.temp3Html[0].RuleBtn,
                    RuleContent: html,
                    IsTab: this.temp3Html[0].IsTab,
                    TabType: this.temp3Html[0].TabType,
                    TempID: 3
                };
                this.$res.postData(this, '/Activityconfig/add_activity/', param).then((response) => {
                    this.temp_3_dialog_event = false;
                    if (response.code == 0) {
                        this.$res.postData(this, '/Activityconfig/query_activity/').then((response) => {
                            this.temp1_Msg.data = [];
                            this.temp1_Msg.data = response;
                        });
                        this.temp_3_dialog = false;
                        this.$message.success(response.msg);
                    } else {
                        this.$message.error(response.msg);
                    }
                });
            },
            temp_3_dialog_name() {
                this.temp_3_dialog_event = 'submitEvent';
            },
            /* 新建大活动弹窗*/
            add_big_activity() {
                this.big_activity_dialog = true;
            },
            big_activity_dialog_submit(arg) {
                this.bigActContent = true;
                this.bigActHtml = arg;
            },
            bigActEditotContent(html) {
                this.bigActContent = false;
                this.big_activity_dialog_event = false;
                let param = {
                    ActivityID: this.bigActHtml[0].ActivityID,
                    ActivityName: this.bigActHtml[0].ActivityName,
                    SortID: this.bigActHtml[0].SortID,
                    StartTime: this.bigActHtml[0].StartTime,
                    EndTime: this.bigActHtml[0].EndTime,
                    DeviceType: this.bigActHtml[0].DeviceType,
                    AccountType: this.bigActHtml[0].AccountType,
                    ChannelID: this.bigActHtml[0].ChannelID,
                    Recharge: this.bigActHtml[0].Recharge,
                    PlayerID: this.bigActHtml[0].PlayerID,
                    ImageUrl: this.bigActHtml[0].ImageUrl,
                    LocationUrl: this.bigActHtml[0].LocationUrl,
                    WebUrl: this.bigActHtml[0].WebUrl,
                    RuleBtn: this.bigActHtml[0].RuleBtn,
                    BtnStyle: this.bigActHtml[0].BtnStyle,
                    BtnWords: this.bigActHtml[0].BtnWords,
                    RegisterDate1: this.bigActHtml[0].query_start_time,
                    RegisterDate2: this.bigActHtml[0].query_end_time,
                    Content: html,
                    TempID: 7,
                };
                this.$res.postData(this, '/Activityconfig/add_activity/', param).then((response) => {
                    if (response.code == 0) {
                        this.big_activity_dialog = false;
                        this.$message.success(response.msg);
                    } else {
                        this.$message.error(response.msg);
                    }
                });
            },
            big_activity_dialog_name() {
                this.big_activity_dialog_event = 'submitEvent';
            },
            /* 活动模板4 -- 公告1 */
            add_notice_1() {
                this.temp_4_notice_1_dialog = true;
            },
            temp_4_notice_dialog_submit(arg) {
                this.notice1content = true;
                this.notice1Html = arg;
            },
            notice1EditorContent(html) {
                this.notice1content = false;
                let param = {
                    NoticeID: this.notice1Html[0].NoticeID,
                    NoticeName: this.notice1Html[0].NoticeName,
                    Classify: this.notice1Html[0].Classify,
                    SortID: this.notice1Html[0].SortID,
                    StartTime: this.notice1Html[0].StartTime,
                    EndTime: this.notice1Html[0].EndTime,
                    BgImage: this.notice1Html[0].BgImage,
                    DeviceType: this.notice1Html[0].DeviceType,
                    AccountType: this.notice1Html[0].AccountType,
                    ChannelID: this.notice1Html[0].ChannelID,
                    Recharge: this.notice1Html[0].Recharge,
                    RegisterDate1: this.notice1Html[0].query_start_time,
                    RegisterDate2: this.notice1Html[0].query_end_time,
                    PlayerID: this.notice1Html[0].PlayerID,
                    Title: this.notice1Html[0].Title,
                    Content: html,
                    Bannar: this.notice1Html[0].Bannar,
                    BtnStyle: this.notice1Html[0].BtnStyle,
                    BtnWords: this.notice1Html[0].BtnWords,
                    IsTab: this.notice1Html[0].IsTab,
                    TabType: this.notice1Html[0].TabType,
                    TempID: 4
                };
                this.$res.postData(this, '/Activityconfig/add_notice/', param).then((response) => {
                    this.temp_4_notice_dialog_event = false;
                    if (response.code == 0) {
                        this.$res.postData(this, '/Activityconfig/query_notice/').then((response) => {
                            this.notice_Msg.data = [];
                            this.notice_Msg.data = response;
                        });
                        this.temp_4_notice_1_dialog = false;
                        this.$message.success(response.msg);
                    } else {
                        this.$message.error(response.msg);
                    }
                });
            },
            temp_4_notice_dialog_name() {
                this.temp_4_notice_dialog_event = 'submitEvent';
            },
            /* 活动模板4 -- 公告2 */
            add_notice_2() {
                this.temp_4_notice_2_dialog = true;
            },
            temp_4_notice2_dialog_submit(arg) {
                this.notice2content = true;
                this.notice2Html = arg;
            },
            notice2EditorContent(html) {
                this.notice2content = false;
                let param = {
                    NoticeID: this.notice2Html[0].NoticeID,
                    NoticeName: this.notice2Html[0].NoticeName,
                    Classify: this.notice2Html[0].Classify,
                    SortID: this.notice2Html[0].SortID,
                    StartTime: this.notice2Html[0].StartTime,
                    EndTime: this.notice2Html[0].EndTime,
                    BgImage: this.notice2Html[0].BgImage,
                    DeviceType: this.notice2Html[0].DeviceType,
                    AccountType: this.notice2Html[0].AccountType,
                    ChannelID: this.notice2Html[0].ChannelID,
                    Recharge: this.notice2Html[0].Recharge,
                    RegisterDate1: this.notice2Html[0].query_start_time,
                    RegisterDate2: this.notice2Html[0].query_end_time,
                    PlayerID: this.notice2Html[0].PlayerID,
                    Title: this.notice2Html[0].Title,
                    Content: html,
                    Bannar: this.notice2Html[0].Bannar,
                    BtnStyle: this.notice2Html[0].BtnStyle,
                    BtnWords: this.notice2Html[0].BtnWords,
                    IsTab: this.notice2Html[0].IsTab,
                    TabType: this.notice2Html[0].TabType,
                    TempID: 5
                };
                this.$res.postData(this, '/Activityconfig/add_notice/', param).then((response) => {
                    this.temp_4_notice2_dialog_event = false;
                    if (response.code == 0) {
                        this.$res.postData(this, '/Activityconfig/query_notice/').then((response) => {
                            this.notice_Msg.data = [];
                            this.notice_Msg.data = response;
                        });
                        this.temp_4_notice_2_dialog = false;
                        this.$message.success(response.msg);
                    } else {
                        this.$message.error(response.msg);
                    }
                });
            },
            temp_4_notice2_dialog_name() {
                this.temp_4_notice2_dialog_event = 'submitEvent';
            },
            /* 活动模板4 -- 公告3 */
            add_notice_3() {
                this.temp_4_notice_3_dialog = true;
            },
            temp_4_notice3_dialog_submit(arg) {
                this.notice3content = true;
                this.notice3Html = arg;
            },
            notice3EditorContent(html) {
                this.notice3content = false;
                let param = {
                    NoticeID: this.notice3Html[0].NoticeID,
                    NoticeName: this.notice3Html[0].NoticeName,
                    Classify: this.notice3Html[0].Classify,
                    SortID: this.notice3Html[0].SortID,
                    StartTime: this.notice3Html[0].StartTime,
                    EndTime: this.notice3Html[0].EndTime,
                    BgImage: this.notice3Html[0].BgImage,
                    DeviceType: this.notice3Html[0].DeviceType,
                    AccountType: this.notice3Html[0].AccountType,
                    ChannelID: this.notice3Html[0].ChannelID,
                    Recharge: this.notice3Html[0].Recharge,
                    RegisterDate1: this.notice3Html[0].query_start_time,
                    RegisterDate2: this.notice3Html[0].query_end_time,
                    PlayerID: this.notice3Html[0].PlayerID,
                    Title: this.notice3Html[0].Title,
                    Content: html,
                    Bannar: this.notice3Html[0].Bannar,
                    BtnStyle: this.notice3Html[0].BtnStyle,
                    BtnWords: this.notice3Html[0].BtnWords,
                    IsTab: this.notice3Html[0].IsTab,
                    TabType: this.notice3Html[0].TabType,
                    TempID: 6
                };
                this.$res.postData(this, '/Activityconfig/add_notice/', param).then((response) => {
                    this.temp_4_notice3_dialog_event = false;
                    if (response.code == 0) {
                        this.$res.postData(this, '/Activityconfig/query_notice/').then((response) => {
                            this.notice_Msg.data = [];
                            this.notice_Msg.data = response;
                        });
                        this.temp_4_notice_3_dialog = false;
                        this.$message.success(response.msg);
                    } else {
                        this.$message.error(response.msg);
                    }
                });
            },
            temp_4_notice3_dialog_name() {
                this.temp_4_notice3_dialog_event = 'submitEvent';
            },
            /* 查询 公告列表 */
            query_notice_btn() {
                this.noticeloading = true;
                this.$res.postData(this, '/Activityconfig/query_notice/').then((response) => {
                    this.notice_Msg.data = [];
                    this.notice_Msg.data = response;
                    this.noticeloading = false;
                    this.$message.success('查询成功');
                });
            },
            banner_recieveRow(arg) {
                switch (arg[2]) {
                    case 'edit':
                        this.editBannerTaskDialog = true;
                        this.editBannerDialogHtml = arg[1];
                        break;
                    case 'delete':
                        this.$confirm('此操作将会永久删除该任务链，是否继续？', '温馨提示', {
                            confirmButtonText: '确定',
                            cancelButtonText: '取消',
                            type: 'warning'
                        }).then(() => {
                            this.$res.postData(this, '/Activityconfig/delete_banner_activity/', arg[1]).then((res) => {
                                if (res.code == 0) {
                                    this.$res.postData(this, '/Activityconfig/query_banner_chain/').then((response) => {
                                        this.bannerAct_Msg.data = [];
                                        this.bannerAct_Msg.data = response;
                                    });
                                    this.$message.success(res.msg);
                                } else {
                                    this.$message.error(res.msg);
                                }
                            });
                        }).catch(() => {
                            this.$message.error('已取消');
                        });
                        break;
                }
            },
            BannerTaskDialogName() {
                this.BannerTaskDialogEvent = 'sumbitEvent';
            },
            BannerTaskDialogSumbit(arg) {
                this.BannerTaskDialogEvent = false;
                let params = {
                    ActivityID: arg[0].ActivityID, //活动ID
                    TaskID: arg[0].TaskID, //任务ID
                    SortID: arg[0].SortID, //排序
                    TaskDesc: arg[0].TaskDesc, //任务说明
                    TaskType: arg[0].TaskType, //任务类型
                    TaskNum: arg[0].TaskNum, //任务数量
                    FrontTask: arg[0].FrontTask, //任务编号
                    Jump: arg[0].Jump, //按钮跳转
                    res_and_item: JSON.stringify(this.editAttrAndItem), //物品
                    Recharge: arg[0].Recharge, //充值额度
                    DayLimitCount: arg[0].DayLimitCount, //日次数
                    WeekLimitCount: arg[0].WeekLimitCount, //周次数
                    TotalLimitCount: arg[0].TotalLimitCount, //总次数
                };
                this.$res.postData(this, '/Activityconfig/edit_banner_activity/', params).then((res) => {
                    if (res.code == 0) {
                        this.$res.postData(this, '/Activityconfig/query_banner_chain/').then((response) => {
                            this.bannerAct_Msg.data = [];
                            this.bannerAct_Msg.data = response;
                        });
                        this.editBannerTaskDialog = false;
                        this.$message.success(res.msg);
                    } else {
                        this.$message.error(res.msg);
                    }
                });
            },
            notice_recieveRow(arg) {
                switch (arg[2]) {
                    case 'edit':
                        this.editNoticeDialog = true;
                        this.editNoticeDialogHtml = arg[1];
                        break;
                    case 'delete':
                        this.$confirm('此操作将会永久删除该公告，是否继续？', '温馨提示', {
                            confirmButtonText: '确定',
                            cancelButtonText: '取消',
                            type: 'warning'
                        }).then(() => {
                            this.$res.postData(this, '/Activityconfig/delete_notice/', arg[1]).then((res) => {
                                if (res.code == 0) {
                                    this.$res.postData(this, '/Activityconfig/query_notice/').then((response) => {
                                        this.notice_Msg.data = [];
                                        this.notice_Msg.data = response;
                                    });
                                    this.$message.success(res.msg);
                                } else {
                                    this.$message.error(res.msg);
                                }
                            });
                        }).catch(() => {
                            this.$message.error('已取消');
                        });
                        break;
                }
            },
            editNoticeDialogName() {
                this.editNoticeDialogEvent = 'sumbitEvent';
            },
            editNoticeDialogSumbit(arg) {
                this.editNoticeDialogEvent = false;
                this.$res.postData(this, '/Activityconfig/edit_notice/', arg[0]).then((res) => {
                    if (res.code == 0) {
                        this.$res.postData(this, '/Activityconfig/query_notice/').then((response) => {
                            this.notice_Msg.data = [];
                            this.notice_Msg.data = response;
                        });
                        this.editNoticeDialog = false;
                        this.$message.success(res.msg);
                    } else {
                        this.$message.error(res.msg);
                    }
                });
            }
        },
        /* 引入组件放在components */
        components: {
            attrAndItem,
            editor,
            editor2,
            editor3,
            editor4,
            editor5,
            editor6,
            editor7,
        },
        /* 计算属性放于computed内 */
        computed: {},
        created() {
            /* 活动模板 */
            this.$res.postData(this, '/Activityconfig/query_activity/').then((response) => {
                this.temp1_Msg.data = [];
                this.temp1_Msg.data = response;
            });
            /* Bannar + 任务链 Table */
            this.$res.postData(this, '/Activityconfig/query_banner_chain/').then((response) => {
                this.bannerAct_Msg.data = [];
                this.bannerAct_Msg.data = response;
            });
            /* 公告 */
            this.$res.postData(this, '/Activityconfig/query_notice/').then((response) => {
                this.notice_Msg.data = [];
                this.notice_Msg.data = response;
            });
            /* 任务类型 */
            let _self = this;
            let baseActivityTaskConfig = task2DialogForm();
            if (!window.taskType) {
                let task_list = new Promise((resolve, reject) => {
                    _self.$res.getSingleData(_self, '/Activityconfig/query_taskChain_list/').then((response) => {
                        if (response) {
                            resolve(response);
                        } else {
                            reject('error');
                        }
                    });
                });
                task_list.then((response) => {
                    window.taskType = response;
                    fillTaskID(response);
                }, () => {
                    _self.$message.error('获取任务类型列表失败');
                });
            } else {
                fillTaskID(window.taskType);
            }

            function fillTaskID(response) {
                response.map((val, i) => {
                    if (i >= 0) {
                        baseActivityTaskConfig.formEle[6].options.push({
                            value: val.TaskChainTypeID,
                            label: val.TaskChainDesc + '-' + val.TaskChainTypeID
                        });
                    }
                });
                _self.task_2_dialog_config = _self.$res.deepClone(baseActivityTaskConfig);
            }
        }
    }
</script>
